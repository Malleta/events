<html ng-app="myApp">
<head>

    <% include partials/head.ejs %>

</head>


<body ng-controller="myCtrl">
<nav class="nav-center">
    <div class="nav-wrapper">
        <a href="/" class="brand-logo center"><img style="width: 130px"
                                                   src="https://vignette1.wikia.nocookie.net/disney/images/8/8b/Starwars-logo.png/revision/latest?cb=20141129122237"></a>
        <a href="#" class="brand-logo right">ADMIN PANEL</a>
        <ul id="nav-mobile" class="left hide-on-med-and-down">
            <li><a href="/">Home</a></li>
        </ul>
        </ul>
    </div>
    <div class="nav-content">
        <ul class="tabs tabs-transparent">
            <li class="tab"><a ng-click="panel = 1">ADD EVENT</a></li>
            <li class="tab"><a ng-click="panel = 2">DELETE EVENT</a></li>
            <li class="tab"><a ng-click="panel = 3">MODIFY EVENT</a></li>
            <li class="tab"><a ng-click="panel = 4">USER DELETE</a></li>
        </ul>
    </div>
</nav>

    <div ng-show="panel == 1" class="col s12">
        <% include adminEventAdd.ejs %>
    </div>
    <div ng-show="panel == 2" class="col s12">
        <% include adminEventDelete.ejs %>
    </div>
    <div ng-show="panel == 3"  class="col s12">
        <% include adminEventModify.ejs %>
    </div>
    <div ng-show="panel == 4"  class="col s12">
        <% include adminUser.ejs %>
    </div>



<!--Google Map API-->
<script>
//    function initAutocomplete() {
//        var map = new google.maps.Map(document.getElementById('mapAdd'), {
//            center: {lat: 44.812045, lng: 20.439453},
//            zoom: 7,
//            mapTypeId: 'roadmap'
//        });
//
//        // Create the search box and link it to the UI element.
//        var input = document.getElementById('pac-input');
//        var searchBox = new google.maps.places.SearchBox(input);
//        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
//
//        // Bias the SearchBox results towards current map's viewport.
//        map.addListener('bounds_changed', function() {
//            searchBox.setBounds(map.getBounds());
//        });
//
//        var markers = [];
//        // Listen for the event fired when the user selects a prediction and retrieve
//        // more details for that place.
//        searchBox.addListener('places_changed', function() {
//            var places = searchBox.getPlaces();
//
//            if (places.length == 0) {
//                return;
//            }
//
//            // Clear out the old markers.
//            markers.forEach(function(marker) {
//                marker.setMap(null);
//            });
//            markers = [];
//
//            // For each place, get the icon, name and location.
//            var bounds = new google.maps.LatLngBounds();
//            places.forEach(function(place) {
//                if (!place.geometry) {
//                    console.log("Returned place contains no geometry");
//                    return;
//                }
//                var icon = {
//                    url: place.icon,
//                    size: new google.maps.Size(71, 71),
//                    origin: new google.maps.Point(0, 0),
//                    anchor: new google.maps.Point(17, 34),
//                    scaledSize: new google.maps.Size(25, 25)
//                };
//
//                // Create a marker for each place.
//                markers.push(new google.maps.Marker({
//                    map: map,
//                    icon: icon,
//                    title: place.name,
//                    position: place.geometry.location
//                }));
//
//                var controllerElement = document.querySelector('body');
//
//
//                angular.element(controllerElement).scope().event.lokacija =  places[0].formatted_address;
//                angular.element(controllerElement).scope().event.lat =  place.geometry.location.lat()
//                angular.element(controllerElement).scope().event.lng =  place.geometry.location.lng()
//                angular.element(controllerElement).scope().$apply();
//
//                if (place.geometry.viewport) {
//                    // Only geocodes have viewport.
//                    bounds.union(place.geometry.viewport);
//                } else {
//                    bounds.extend(place.geometry.location);
//                }
//            });
//            map.fitBounds(bounds);
//        });
//    }

//setTimeout(function () {
//    angular.element(controllerElement).scope().initAutocomplete = initAutocomplete();
//    angular.element(controllerElement).scope().$apply();
//},2000)




</script>




<% include partials/footer.ejs %>

</body>


</html>